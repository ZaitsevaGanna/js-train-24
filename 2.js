console.log("Завдання: 2 ==============================");

// Створюємо функцію task2
function task2() {
  function promise1() {
    return new Promise((resolve, reject) => {
      setTimeout(resolve("Проміс 1 виконано"), 2000);
      reject(new Error("Об'єкт пустий"));
    });
  }

  // function promise2() {
  //   return new Promise((resolve, reject) => {
  //     setTimeout(resolve(console.log("Проміс 2 виконано"), 5000));
  //     reject(new Error("Об'єкт пустий"));
  //   });
  // }

  const prom2 = new Promise((resolve, reject) => {
    setTimeout(resolve("Проміс 2 виконано"), 2000);
    reject(new Error("Об'єкт пустий"));
  });

  // Функція повертає новий проміс
  // За допомогою setTimeout ми симулюємо затримку timeout, яка виникає при роботі з асинхронними джерелами даних
  // Якщо об'єкт не пустий, ми викликаємо resolve з data
  // Якщо об'єкт пустий, ми викликаємо reject з новим об'єктом Error("Об'єкт пустий")

  Promise.race([promise1(), prom2]).then((value) => {
    console.log(value);
  });

  console.log("Завдання 2 завершено");
}
// Створюємо функцію promise1
// Повертаємо новий проміс
// Використовуємо setTimeout для імітації асинхронної операції, яка завершується через 2 секунди.
// Після 2 секунд викликаємо resolve з результатом проміса, який є рядком "Проміс 1 виконано"
// Створюємо функцію promise2
// Повертаємо новий проміс
// Використовуємо setTimeout для імітації асинхронної операції, яка завершується через 5 секунди.
// Після 5 секунд викликаємо resolve з результатом проміса, який є рядком "Проміс 2 виконано"
// Використовуємо Promise.race для визначення, який проміс виконується першим.
// Метод повертає новий проміс, який вирішується або відхиляється негайно після розв'язання або відхилення будь-якого з промісів у переданому списку.
// У разі успіху виводимо результат
// У разі помилки виводимо повідомлення про помилку
// Незалежно від результату, виводимо повідомлення про завершення обробки промісів, який є рядом "Завдання 2 завершено"

// Викликаємо функцію task2
task2();
